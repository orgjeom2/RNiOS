// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: user_auth.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace UserService {
  public static partial class UserAuth
  {
    static readonly string __ServiceName = "user_service.UserAuth";

    static readonly grpc::Marshaller<global::UserService.LoginInfo> __Marshaller_user_service_LoginInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UserService.LoginInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UserService.LoginResult> __Marshaller_user_service_LoginResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UserService.LoginResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UserService.LogoutInfo> __Marshaller_user_service_LogoutInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UserService.LogoutInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UserService.LogoutResult> __Marshaller_user_service_LogoutResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UserService.LogoutResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UserService.GetUserInfo> __Marshaller_user_service_GetUserInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UserService.GetUserInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::UserService.GetUserResult> __Marshaller_user_service_GetUserResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UserService.GetUserResult.Parser.ParseFrom);

    static readonly grpc::Method<global::UserService.LoginInfo, global::UserService.LoginResult> __Method_login = new grpc::Method<global::UserService.LoginInfo, global::UserService.LoginResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "login",
        __Marshaller_user_service_LoginInfo,
        __Marshaller_user_service_LoginResult);

    static readonly grpc::Method<global::UserService.LogoutInfo, global::UserService.LogoutResult> __Method_logout = new grpc::Method<global::UserService.LogoutInfo, global::UserService.LogoutResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "logout",
        __Marshaller_user_service_LogoutInfo,
        __Marshaller_user_service_LogoutResult);

    static readonly grpc::Method<global::UserService.GetUserInfo, global::UserService.GetUserResult> __Method_getUser = new grpc::Method<global::UserService.GetUserInfo, global::UserService.GetUserResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getUser",
        __Marshaller_user_service_GetUserInfo,
        __Marshaller_user_service_GetUserResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::UserService.UserAuthReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UserAuth</summary>
    public abstract partial class UserAuthBase
    {
      public virtual global::System.Threading.Tasks.Task<global::UserService.LoginResult> login(global::UserService.LoginInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::UserService.LogoutResult> logout(global::UserService.LogoutInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::UserService.GetUserResult> getUser(global::UserService.GetUserInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserAuth</summary>
    public partial class UserAuthClient : grpc::ClientBase<UserAuthClient>
    {
      /// <summary>Creates a new client for UserAuth</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserAuthClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UserAuth that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserAuthClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserAuthClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserAuthClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::UserService.LoginResult login(global::UserService.LoginInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::UserService.LoginResult login(global::UserService.LoginInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::UserService.LoginResult> loginAsync(global::UserService.LoginInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return loginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::UserService.LoginResult> loginAsync(global::UserService.LoginInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_login, null, options, request);
      }
      public virtual global::UserService.LogoutResult logout(global::UserService.LogoutInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return logout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::UserService.LogoutResult logout(global::UserService.LogoutInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_logout, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::UserService.LogoutResult> logoutAsync(global::UserService.LogoutInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return logoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::UserService.LogoutResult> logoutAsync(global::UserService.LogoutInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_logout, null, options, request);
      }
      public virtual global::UserService.GetUserResult getUser(global::UserService.GetUserInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::UserService.GetUserResult getUser(global::UserService.GetUserInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::UserService.GetUserResult> getUserAsync(global::UserService.GetUserInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::UserService.GetUserResult> getUserAsync(global::UserService.GetUserInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getUser, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserAuthClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserAuthClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UserAuthBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_login, serviceImpl.login)
          .AddMethod(__Method_logout, serviceImpl.logout)
          .AddMethod(__Method_getUser, serviceImpl.getUser).Build();
    }

  }
}
#endregion
